?start: program

id: CNAME

cte_num: INT -> int
       | FLOAT -> float

cte_string: ESCAPED_STRING

factor: id -> factor_id
      | PLUS id -> positive_factor_id
      | MINUS id -> negative_factor_id
      | cte_num -> factor_cte_num
      | PLUS cte_num -> positive_cte_num
      | MINUS cte_num -> negative_cte_num
      | LPAREN expresion RPAREN -> parenthesis_expresion
      | func_call -> factor_func_call

?term: factor
     | term MULT factor -> term_mult
     | term DIV factor -> term_div

?exp: term
    | exp PLUS term -> exp_plus
    | exp MINUS term -> exp_minus

?comparison: exp
           | exp comparison_op exp -> binary_comparison

?logical_and: comparison
            | logical_and AND comparison -> binary_logical_and

?logical_or: logical_and
           | logical_or OR logical_and -> binary_logical_or

?expresion: logical_or

comparison_op: GT | LT | NE | EE | GTE | LTE

?var_type: "float" -> float_type
         | "int" -> int_type

assign: id ASSIGN expresion SEMICOLON

print: PRINT LPAREN (expresion | cte_string) RPAREN SEMICOLON -> print_single
     | PRINT LPAREN (expresion | cte_string) (COMMA (expresion | cte_string))+ RPAREN SEMICOLON -> print_multiple

cycle: WHILE LPAREN expresion RPAREN DO body SEMICOLON

condition: IF LPAREN expresion RPAREN body SEMICOLON -> condition_if
         | IF LPAREN expresion RPAREN body ELSE body SEMICOLON -> condition_if_else

const_decl: CONST id COLON var_type ASSIGN expresion SEMICOLON

var_decl: VAR id COLON var_type SEMICOLON -> var_single_decl_no_assign
        | VAR id COLON var_type ASSIGN expresion SEMICOLON -> var_single_decl_assign
        | VAR id (COMMA id)+ COLON var_type SEMICOLON -> var_multi_decl_no_assign
        | VAR id (COMMA id)+ COLON var_type ASSIGN expresion SEMICOLON -> var_multi_decl_assign

?body: LBRACE RBRACE -> empty_body
     | LBRACE statement+ RBRACE -> body_statements

?params: id COLON var_type -> param
       | id COLON var_type (COMMA id COLON var_type)+ -> params_list

?return_type: "void" -> void
            | var_type -> return_type

function: return_type id LPAREN RPAREN LBRACKET body RBRACKET SEMICOLON -> function_no_params_no_var_decl
        | return_type id LPAREN params RPAREN LBRACKET body RBRACKET SEMICOLON -> function_no_var_decl
        | return_type id LPAREN params RPAREN LBRACKET var_decl+ body RBRACKET SEMICOLON -> function_params_var_decl
        | return_type id LPAREN RPAREN LBRACKET var_decl+ body RBRACKET SEMICOLON -> function_no_params

func_call: id LPAREN RPAREN -> func_call_no_params
         | id LPAREN expresion RPAREN -> func_call_single_param
         | id LPAREN expresion (COMMA expresion)+ RPAREN -> func_call_multiple_params

func_call_stmt: func_call SEMICOLON

return: RETURN expresion SEMICOLON -> return_expresion

?statement: assign
          | condition
          | cycle
          | func_call_stmt
          | print
          | return

program: program_pt1 program_pt2 MAIN body END -> program_no_decl
       | program_pt1 program_pt2 (const_decl | var_decl)+ MAIN body END -> program_decl_no_func
       | program_pt1 program_pt2 function+ MAIN body END -> program_func_no_decl
       | program_pt1 program_pt2 (const_decl | var_decl)+ function+ MAIN body END -> program_decl_func

program_pt1: PROGRAM
program_pt2: id SEMICOLON

// 
// Tokens 
// 

// PALABRAS RESERVADAS
PROGRAM: "program"
MAIN: "main"
END: "end"
CONST: "const"
VAR: "var"
VOID: "void"
WHILE: "while"
DO: "do"
IF: "if"
ELSE: "else"
PRINT: "print"
AND: "and"
OR: "or"
RETURN: "return"

// SIMBOLOS
ASSIGN: "="
COLON: ":"
SEMICOLON: ";"
COMMA: ","
LPAREN: "("
RPAREN: ")"
LBRACE: "{"
RBRACE: "}"
LBRACKET: "["
RBRACKET: "]"
PLUS: "+"
MINUS: "-"
MULT: "*"
DIV: "/"
GT: ">"
LT: "<"
GTE: ">="
LTE: "<="
NE: "!="
EE: "=="

%import common.WS
%import common.CNAME
%import common.INT
%import common.FLOAT
%import common.ESCAPED_STRING
%import common.CPP_COMMENT

%ignore WS
%ignore CPP_COMMENT