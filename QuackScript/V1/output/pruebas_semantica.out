Parse Tree:
program_decl_no_func
  program_pt1	program
  program_pt2
    id	TestExpr
    ;
  const_decl
    const
    id	x
    :
    float_type
    =
    factor_cte_num
      int	2
    ;
  var_single_decl_assign
    var
    id	y
    :
    int_type
    =
    binary_logical_or
      parenthesis_expresion
        (
        binary_comparison
          factor_id
            id	x
          comparison_op	<=
          factor_cte_num
            int	2
        )
      or
      parenthesis_expresion
        (
        factor_cte_num
          int	0
        )
    ;
  main
  body_statements
    {
    print_single
      print
      (
      factor_id
        id	y
      )
      ;
    condition_if
      if
      (
      factor_id
        id	y
      )
      body_statements
        {
        print_multiple
          print
          (
          cte_string	"Entre!"
          ,
          factor_id
            id	x
          )
          ;
        }
      ;
    }
  end

IR:
ProgramNode(name='TestExpr', global_decls=[VarDeclNode(names=[IdNode(name='x')], var_type='float', init_value=CteNumNode(value=2), category='const'), VarDeclNode(names=[IdNode(name='y')], var_type='int', init_value=LogicalOrNode(op='and', left=ComparisonNode(op='<=', left=IdNode(name='x'), right=CteNumNode(value=2)), right=CteNumNode(value=0)), category='var')], functions=[], main_body=BodyNode(statements=[PrintNode(values=[IdNode(name='y')]), IfNode(condition=IdNode(name='y'), then_body=BodyNode(statements=[PrintNode(values=[CteStringNode(value='Entre!'), IdNode(name='x')])]))]))

Symbol Table:
Container: TestExpr
  Parameters:
  Symbols:
  x: float, 14000, const, None
  y: int, 1001, var, None

