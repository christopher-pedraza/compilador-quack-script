Parse Tree:
program_decl_no_func
  program
  id	TestExpr
  ;
  const_decl
    const
    id	x
    :
    float_type
    =
    factor_cte_num
      int	2
    ;
  var_single_decl_assign
    var
    id	y
    :
    int_type
    =
    expresion_logic_cond
      parenthesis_expresion
        (
        expresion_comparison_op
          factor_id
            id	x
          <=
          factor_cte_num
            int	2
        )
      or
      parenthesis_expresion
        (
        factor_cte_num
          int	0
        )
    ;
  main
  body_statements
    {
    print_single
      print
      (
      factor_id
        id	y
      )
      ;
    condition_if
      if
      (
      factor_id
        id	y
      )
      body_statements
        {
        print_multiple
          print
          (
          cte_string	"Entre!"
          ,
          factor_id
            id	x
          )
          ;
        }
      ;
    }
  end

IR:
('program', 'TestExpr', [('var_decl', ['x'], 'float', ('cte_num', 2), 'const'), ('var_decl', ['y'], 'int', ('expresion_logic_cond', ('expresion_comparison_op', ('id', 'x'), Token('LTE', '<='), ('cte_num', 2)), Token('OR', 'or'), ('cte_num', 0)), 'var')], [], ('body_statements', [('print', [('id', 'y')]), ('condition_if', ('id', 'y'), ('body_statements', [('print', [('cte_string', 'Entre!'), ('id', 'x')])]))]))

Symbol Table:
Container: global
  Parameters:
  Symbols:
  x: float, 2.0, const, None
  y: int, 1, var, None

