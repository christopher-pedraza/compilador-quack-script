import pickle
import os
from MemoryManager import MemoryManager


class QuackVirtualMachine:
    """
    A simple virtual machine to execute QuackScript programs.
    It reads object files generated by the QuackCompiler
    and translates them into a format that can be executed.
    """

    def __init__(self):
        """
        Initializes the Quack Virtual Machine.
        """
        self.symbol_table = None
        self.quadruples = None
        self.memory_manager = MemoryManager()
        self.operators = None

    def read_and_delete_object_files(self, file_name):
        print(f"Reading object file: {file_name}")
        with open(file_name, "rb") as f:
            data = pickle.load(f)
        os.remove(file_name)
        return data

    def process_quadruples(self):
        """
        Processes the quadruples and executes them.
        This method should be implemented to handle the execution logic.
        """
        if self.quadruples is None:
            print("No quadruples to process.")
            return

        current = 0
        for i in range(len(self.quadruples)):
            quadruple = self.quadruples[i]
            op, arg1, arg2, result = quadruple

            if op == "goto":
                current = int(result)
            else:
                # Handle other operations
                print(f"Executing operation: {self.operators[op]} with args {arg1}, {arg2}, result {result}")

            # Update current index
            current += 1

    def translate_program(self, file_name):
        """
        Translates a QuackScript program from an object file
        """
        if not os.path.exists(file_name):
            print(f"File {file_name} does not exist.")
            return

        data = self.read_and_delete_object_files(file_name)
        self.quadruples = data["quadruples"].quadruples
        self.operators = data["quadruples"].operators.operators
        self.operators = {value: key for key, value in self.operators.items()}

        self.symbol_table = data["symbol_table"]

        self.process_quadruples()


if __name__ == "__main__":
    qvm = QuackVirtualMachine()
