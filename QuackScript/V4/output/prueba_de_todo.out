Parse Tree:
program_decl_func
  program
  id	AllInOne
  ;
  const_decl
    const
    id	PI
    :
    float_type
    =
    factor_cte_num
      float	3.14159
    ;
  var_single_decl_assign
    var
    id	radius
    :
    float_type
    =
    factor_cte_num
      float	2.5
    ;
  var_single_decl_no_assign
    var
    id	area
    :
    float_type
    ;
  var_single_decl_no_assign
    var
    id	isPositive
    :
    int_type
    ;
  function_no_params_no_var_decl
    void
    id	greet
    (
    )
    [
    body_statements
      {
      print_single
        print
        (
        cte_string	"Bienvenido al programa All-In-One!"
        )
        ;
      }
    ]
    ;
  function_params_var_decl
    void
    id	calculateArea
    (
    param
      id	r
      :
      float_type
    )
    [
    var_single_decl_no_assign
      var
      id	temp_area
      :
      float_type
      ;
    body_statements
      {
      assign
        id	temp_area
        =
        term_mult
          factor_id
            id	PI
          *
          factor_id
            id	r
          *
          factor_id
            id	r
        ;
      print_multiple
        print
        (
        cte_string	"Área calculada:"
        ,
        factor_id
          id	temp_area
        )
        ;
      }
    ]
    ;
  function_no_var_decl
    void
    id	checkSign
    (
    param
      id	value
      :
      int_type
    )
    [
    body_statements
      {
      condition_if_else
        if
        (
        expresion_comparison_op
          factor_id
            id	value
          >
          factor_cte_num
            int	0
        )
        body_statements
          {
          print_multiple
            print
            (
            factor_id
              id	value
            ,
            cte_string	" es positivo."
            )
            ;
          }
        else
        body_statements
          {
          print_single
            print
            (
            cte_string	"No es positivo"
            )
            ;
          }
        ;
      }
    ]
    ;
  function_no_var_decl
    void
    id	countDown
    (
    param
      id	start
      :
      int_type
    )
    [
    body_statements
      {
      cycle
        while
        (
        expresion_comparison_op
          factor_id
            id	start
          >=
          factor_cte_num
            int	1
        )
        do
        body_statements
          {
          print_single
            print
            (
            factor_id
              id	start
            )
            ;
          assign
            id	start
            =
            exp_minus
              factor_id
                id	start
              -
              factor_cte_num
                int	1
            ;
          }
        ;
      }
    ]
    ;
  main
  body_statements
    {
    func_call_no_params
      id	greet
      (
      )
      ;
    assign
      id	area
      =
      term_mult
        factor_id
          id	PI
        *
        factor_id
          id	radius
        *
        factor_id
          id	radius
      ;
    print_multiple
      print
      (
      cte_string	"Área del círculo:"
      ,
      factor_id
        id	area
      )
      ;
    func_call_single_param
      id	calculateArea
      (
      factor_cte_num
        float	3.0
      )
      ;
    assign
      id	isPositive
      =
      factor_cte_num
        int	10
      ;
    condition_if
      if
      (
      expresion_comparison_op
        factor_id
          id	isPositive
        !=
        factor_cte_num
          int	0
      )
      body_statements
        {
        print_single
          print
          (
          cte_string	"isPositive no es cero."
          )
          ;
        }
      ;
    func_call_single_param
      id	checkSign
      (
      negative_cte_num
        -
        int	5
      )
      ;
    func_call_single_param
      id	checkSign
      (
      factor_cte_num
        int	0
      )
      ;
    func_call_single_param
      id	checkSign
      (
      factor_cte_num
        int	7
      )
      ;
    func_call_single_param
      id	countDown
      (
      factor_cte_num
        int	5
      )
      ;
    print_multiple
      print
      (
      cte_string	"Fin"
      ,
      cte_string	"del"
      ,
      cte_string	"programa."
      ,
      cte_string	"Gracias por usar All-In-One!"
      )
      ;
    }
  end

IR:
('program', 'AllInOne', [('var_decl', ['PI'], 'float', ('cte_num', 3.14159), 'const'), ('var_decl', ['radius'], 'float', ('cte_num', 2.5), 'var'), ('var_decl', ['area'], 'float', None, 'var'), ('var_decl', ['isPositive'], 'int', None, 'var')], [('function_decl', 'greet', [], ('body_statements', [('print', [('cte_string', 'Bienvenido al programa All-In-One!')])]), []), ('function_decl', 'calculateArea', ('params', [('r', 'float')]), ('body_statements', [('assign', 'temp_area', ('term_mult', ('term_mult', ('id', 'PI'), ('id', 'r')), ('id', 'r'))), ('print', [('cte_string', 'Área calculada:'), ('id', 'temp_area'), Token('SEMICOLON', ';')])]), [('var_decl', ['temp_area'], 'float', None, 'var')]), ('function_decl', 'checkSign', ('params', [('value', 'int')]), ('body_statements', [('condition_if_else', ('expresion_comparison_op', ('id', 'value'), Token('GT', '>'), ('cte_num', 0)), ('body_statements', [('print', [('id', 'value'), ('cte_string', ' es positivo.'), Token('SEMICOLON', ';')])]), ('body_statements', [('print', [('cte_string', 'No es positivo')])]))]), []), ('function_decl', 'countDown', ('params', [('start', 'int')]), ('body_statements', [('cycle', ('expresion_comparison_op', ('id', 'start'), Token('GTE', '>='), ('cte_num', 1)), ('body_statements', [('print', [('id', 'start')]), ('assign', 'start', ('exp_minus', ('id', 'start'), ('cte_num', 1)))]))]), [])], ('body_statements', [('func_call', 'greet', []), ('assign', 'area', ('term_mult', ('term_mult', ('id', 'PI'), ('id', 'radius')), ('id', 'radius'))), ('print', [('cte_string', 'Área del círculo:'), ('id', 'area'), Token('SEMICOLON', ';')]), ('func_call', 'calculateArea', [('cte_num', 3.0)]), ('assign', 'isPositive', ('cte_num', 10)), ('condition_if', ('expresion_comparison_op', ('id', 'isPositive'), Token('NE', '!='), ('cte_num', 0)), ('body_statements', [('print', [('cte_string', 'isPositive no es cero.')])])), ('func_call', 'checkSign', [('negative_cte_num', 5)]), ('func_call', 'checkSign', [('cte_num', 0)]), ('func_call', 'checkSign', [('cte_num', 7)]), ('func_call', 'countDown', [('cte_num', 5)]), ('print', [('cte_string', 'Fin'), ('cte_string', 'del'), ('cte_string', 'programa.'), ('cte_string', 'Gracias por usar All-In-One!'), Token('SEMICOLON', ';')])]))

Symbol Table:
Container: global
  Parameters:
  Symbols:
  PI: float, 3.14159, const, None
  radius: float, 2.5, var, None
  area: float, 19.6349375, var, None
  isPositive: int, 10, var, None
Container: greet
  Parameters:
  Symbols:
Container: calculateArea
  Parameters:
  r: float, None, param, 0
  Symbols:
  temp_area: float, 28.274309999999996, var, None
Container: checkSign
  Parameters:
  value: int, None, param, 0
  Symbols:
Container: countDown
  Parameters:
  start: int, None, param, 0
  Symbols:

