?start: body

id: CNAME

cte_num: INT -> int
       | FLOAT -> float

cte_string: ESCAPED_STRING

factor: id -> factor_id
      | PLUS id -> positive_factor_id
      | MINUS id -> negative_factor_id
      | cte_num -> factor_cte_num
      | PLUS cte_num -> positive_cte_num
      | MINUS cte_num -> negative_cte_num
      | LPAREN expresion RPAREN -> parenthesis_expresion

?term: factor
     | factor (MULT factor)+ -> term_mult
     | factor (DIV factor)+ -> term_div

?exp: term
    | term (PLUS term)+ -> exp_plus
    | term (MINUS term)+ -> exp_minus

?expresion: exp
          | exp comparison_op exp -> expresion_comparison_op
          | exp logic_cond exp -> expresion_logic_cond

?comparison_op: GT | LT | NE | EE | GTE | LTE
?logic_cond: AND | OR

?params: id COLON var_type -> param
       | id COLON var_type (COMMA id COLON var_type)+ -> params_list

?var_type: "float" -> float_type
         | "int" -> int_type

assign: id ASSIGN expresion SEMICOLON

print: PRINT LPAREN (expresion | cte_string) RPAREN SEMICOLON -> print_single
     | PRINT LPAREN (expresion | cte_string) (COMMA (expresion | cte_string))+ RPAREN SEMICOLON -> print_multiple

cycle: WHILE LPAREN expresion RPAREN DO body SEMICOLON

condition: IF LPAREN expresion RPAREN body SEMICOLON -> condition_if
         | IF LPAREN expresion RPAREN body ELSE body SEMICOLON -> condition_if_else

?body: LBRACE RBRACE -> empty_body
     | LBRACE statement+ RBRACE -> body_statements

?statement: assign
         | condition
         | cycle
//         | func_call
         | print

// 
// Tokens 
// 

// PALABRAS RESERVADAS
PROGRAM: "program"
MAIN: "main"
END: "end"
CONST: "const"
VAR: "var"
VOID: "void"
WHILE: "while"
DO: "do"
IF: "if"
ELSE: "else"
PRINT: "print"
AND: "and"
OR: "or"

// SIMBOLOS
ASSIGN: "="
COLON: ":"
SEMICOLON: ";"
COMMA: ","
LPAREN: "("
RPAREN: ")"
LBRACE: "{"
RBRACE: "}"
LBRACKET: "["
RBRACKET: "]"
PLUS: "+"
MINUS: "-"
MULT: "*"
DIV: "/"
GT: ">"
LT: "<"
GTE: ">="
LTE: "<="
NE: "!="
EE: "=="

%import common.WS
%import common.CNAME
%import common.INT
%import common.FLOAT
%import common.ESCAPED_STRING

%ignore WS